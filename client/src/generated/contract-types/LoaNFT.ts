/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LoanStruct = {
  applicant: string;
  supplier: string;
  amount: BigNumberish;
  erc721contract: string;
  tokenId: BigNumberish;
  yearlyInterestRate: BigNumberish;
  deadline: BigNumberish;
  startedAt: BigNumberish;
  finalInterests: BigNumberish;
  status: BigNumberish;
};

export type LoanStructOutput = [
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  applicant: string;
  supplier: string;
  amount: BigNumber;
  erc721contract: string;
  tokenId: BigNumber;
  yearlyInterestRate: BigNumber;
  deadline: BigNumber;
  startedAt: BigNumber;
  finalInterests: BigNumber;
  status: number;
};

export type LoanRequestStruct = {
  applicant: string;
  amount: BigNumberish;
  erc721contract: string;
  tokenId: BigNumberish;
  loanDuration: BigNumberish;
  yearlyInterestRate: BigNumberish;
};

export type LoanRequestStructOutput = [
  string,
  BigNumber,
  string,
  BigNumber,
  number,
  BigNumber
] & {
  applicant: string;
  amount: BigNumber;
  erc721contract: string;
  tokenId: BigNumber;
  loanDuration: number;
  yearlyInterestRate: BigNumber;
};

export interface LoaNFTInterface extends utils.Interface {
  functions: {
    "getLoan(bytes32)": FunctionFragment;
    "getLoanInterests(bytes32)": FunctionFragment;
    "getLoanRequest(bytes32)": FunctionFragment;
    "loanRequests(uint256)": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "provideLiquidityForALoan(bytes32)": FunctionFragment;
    "redeemLoanOrNFT(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayLoan(bytes32)": FunctionFragment;
    "requestLoan(uint256,address,uint256,uint32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "widthrawLoan(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getLoan", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getLoanInterests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideLiquidityForALoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLoanOrNFT",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLoan",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "widthrawLoan",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidityForALoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLoanOrNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "widthrawLoan",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityProvided(bytes32,address,address,uint256,uint32,uint256)": EventFragment;
    "LoanExtinguishedWithMoney(bytes32,address,address)": EventFragment;
    "LoanExtinguishedWithNFT(bytes32,address,address)": EventFragment;
    "LoanRepaid(bytes32,address,address)": EventFragment;
    "LoanRequested(bytes32,address,uint256,uint32,uint256)": EventFragment;
    "LoanWithdraw(bytes32,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanExtinguishedWithMoney"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanExtinguishedWithNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LiquidityProvidedEvent = TypedEvent<
  [string, string, string, BigNumber, number, BigNumber],
  {
    requestId: string;
    applicant: string;
    supplier: string;
    amount: BigNumber;
    loanDuration: number;
    yearlyInterestRate: BigNumber;
  }
>;

export type LiquidityProvidedEventFilter =
  TypedEventFilter<LiquidityProvidedEvent>;

export type LoanExtinguishedWithMoneyEvent = TypedEvent<
  [string, string, string],
  { requestId: string; applicant: string; supplier: string }
>;

export type LoanExtinguishedWithMoneyEventFilter =
  TypedEventFilter<LoanExtinguishedWithMoneyEvent>;

export type LoanExtinguishedWithNFTEvent = TypedEvent<
  [string, string, string],
  { requestId: string; applicant: string; supplier: string }
>;

export type LoanExtinguishedWithNFTEventFilter =
  TypedEventFilter<LoanExtinguishedWithNFTEvent>;

export type LoanRepaidEvent = TypedEvent<
  [string, string, string],
  { requestId: string; applicant: string; supplier: string }
>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export type LoanRequestedEvent = TypedEvent<
  [string, string, BigNumber, number, BigNumber],
  {
    requestId: string;
    applicant: string;
    amount: BigNumber;
    loanDuration: number;
    yearlyInterestRate: BigNumber;
  }
>;

export type LoanRequestedEventFilter = TypedEventFilter<LoanRequestedEvent>;

export type LoanWithdrawEvent = TypedEvent<
  [string, string, string],
  { requestId: string; applicant: string; supplier: string }
>;

export type LoanWithdrawEventFilter = TypedEventFilter<LoanWithdrawEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LoaNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoaNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLoan(
      _loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[LoanStructOutput]>;

    getLoanInterests(
      loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanRequest(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[LoanRequestStructOutput]>;

    loanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, number, BigNumber] & {
        applicant: string;
        amount: BigNumber;
        erc721contract: string;
        tokenId: BigNumber;
        loanDuration: number;
        yearlyInterestRate: BigNumber;
      }
    >;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        applicant: string;
        supplier: string;
        amount: BigNumber;
        erc721contract: string;
        tokenId: BigNumber;
        yearlyInterestRate: BigNumber;
        deadline: BigNumber;
        startedAt: BigNumber;
        finalInterests: BigNumber;
        status: number;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    provideLiquidityForALoan(
      requestId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemLoanOrNFT(
      loanId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayLoan(
      loanId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestLoan(
      amount: BigNumberish,
      erc721contract: string,
      tokenId: BigNumberish,
      loanDuration: BigNumberish,
      yearlyInterestRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    widthrawLoan(
      loanId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLoan(
    _loanId: BytesLike,
    overrides?: CallOverrides
  ): Promise<LoanStructOutput>;

  getLoanInterests(
    loanId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanRequest(
    _requestId: BytesLike,
    overrides?: CallOverrides
  ): Promise<LoanRequestStructOutput>;

  loanRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, number, BigNumber] & {
      applicant: string;
      amount: BigNumber;
      erc721contract: string;
      tokenId: BigNumber;
      loanDuration: number;
      yearlyInterestRate: BigNumber;
    }
  >;

  loans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      applicant: string;
      supplier: string;
      amount: BigNumber;
      erc721contract: string;
      tokenId: BigNumber;
      yearlyInterestRate: BigNumber;
      deadline: BigNumber;
      startedAt: BigNumber;
      finalInterests: BigNumber;
      status: number;
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  provideLiquidityForALoan(
    requestId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemLoanOrNFT(
    loanId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayLoan(
    loanId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestLoan(
    amount: BigNumberish,
    erc721contract: string,
    tokenId: BigNumberish,
    loanDuration: BigNumberish,
    yearlyInterestRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  widthrawLoan(
    loanId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLoan(
      _loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<LoanStructOutput>;

    getLoanInterests(
      loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanRequest(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<LoanRequestStructOutput>;

    loanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, number, BigNumber] & {
        applicant: string;
        amount: BigNumber;
        erc721contract: string;
        tokenId: BigNumber;
        loanDuration: number;
        yearlyInterestRate: BigNumber;
      }
    >;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        applicant: string;
        supplier: string;
        amount: BigNumber;
        erc721contract: string;
        tokenId: BigNumber;
        yearlyInterestRate: BigNumber;
        deadline: BigNumber;
        startedAt: BigNumber;
        finalInterests: BigNumber;
        status: number;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    provideLiquidityForALoan(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLoanOrNFT(
      loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayLoan(loanId: BytesLike, overrides?: CallOverrides): Promise<void>;

    requestLoan(
      amount: BigNumberish,
      erc721contract: string,
      tokenId: BigNumberish,
      loanDuration: BigNumberish,
      yearlyInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    widthrawLoan(loanId: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LiquidityProvided(bytes32,address,address,uint256,uint32,uint256)"(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null,
      amount?: null,
      loanDuration?: null,
      yearlyInterestRate?: null
    ): LiquidityProvidedEventFilter;
    LiquidityProvided(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null,
      amount?: null,
      loanDuration?: null,
      yearlyInterestRate?: null
    ): LiquidityProvidedEventFilter;

    "LoanExtinguishedWithMoney(bytes32,address,address)"(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanExtinguishedWithMoneyEventFilter;
    LoanExtinguishedWithMoney(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanExtinguishedWithMoneyEventFilter;

    "LoanExtinguishedWithNFT(bytes32,address,address)"(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanExtinguishedWithNFTEventFilter;
    LoanExtinguishedWithNFT(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanExtinguishedWithNFTEventFilter;

    "LoanRepaid(bytes32,address,address)"(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanRepaidEventFilter;
    LoanRepaid(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanRepaidEventFilter;

    "LoanRequested(bytes32,address,uint256,uint32,uint256)"(
      requestId?: BytesLike | null,
      applicant?: string | null,
      amount?: null,
      loanDuration?: null,
      yearlyInterestRate?: null
    ): LoanRequestedEventFilter;
    LoanRequested(
      requestId?: BytesLike | null,
      applicant?: string | null,
      amount?: null,
      loanDuration?: null,
      yearlyInterestRate?: null
    ): LoanRequestedEventFilter;

    "LoanWithdraw(bytes32,address,address)"(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanWithdrawEventFilter;
    LoanWithdraw(
      requestId?: BytesLike | null,
      applicant?: string | null,
      supplier?: string | null
    ): LoanWithdrawEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getLoan(_loanId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getLoanInterests(
      loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanRequest(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidityForALoan(
      requestId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemLoanOrNFT(
      loanId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayLoan(
      loanId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestLoan(
      amount: BigNumberish,
      erc721contract: string,
      tokenId: BigNumberish,
      loanDuration: BigNumberish,
      yearlyInterestRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    widthrawLoan(
      loanId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLoan(
      _loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanInterests(
      loanId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanRequest(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideLiquidityForALoan(
      requestId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemLoanOrNFT(
      loanId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayLoan(
      loanId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestLoan(
      amount: BigNumberish,
      erc721contract: string,
      tokenId: BigNumberish,
      loanDuration: BigNumberish,
      yearlyInterestRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    widthrawLoan(
      loanId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
